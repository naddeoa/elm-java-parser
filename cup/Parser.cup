package org.naddeo.elm.parser;

import java_cup.runtime.*;

import org.naddeo.elm.lang.Literal;
import org.naddeo.elm.lang.LiteralFactory;

import org.naddeo.elm.parser.ParserErrorHandler;

action code {:

    private final LiteralFactory literalFactory = new LiteralFactory();

    private String stripQuotes(String input)
    {
        return input.substring(1, input.length()-1);
    }
:};

parser code {:

    public void report_error(String message, Object info) {
        ParserErrorHandler handler = new ParserErrorHandler();
        handler.handle(this, this.stack, message, (Symbol)info);
    }

:};

terminal                            COLON, L_PAREN, R_PAREN, EQUALS, L_BRACKET, R_BRACKET, DOLLAR;
terminal                            TYPE, EXCLAMATION, BAR;
terminal                            L_SQUARE_BRACKET, R_SQUARE_BRACKET;


terminal                            DEBUG_VALUE, DEBUG_LITERAL;

terminal Integer                    INT_NUM;
terminal Double                     FLOAT_NUM;
terminal Boolean                    BOOLEAN;
terminal String                     STR;
terminal String                     CHR;

non terminal Literal<?>             literal;
non terminal                        debug;

start with debug;

literal         ::= INT_NUM:value
                   {:
                    RESULT = literalFactory.of(value);
                   :}
                   |
                    FLOAT_NUM:value
                   {:
                    RESULT = literalFactory.of(value);
                   :}
                   |
                    CHR:value
                   {:
                    RESULT = literalFactory.of(stripQuotes(value).charAt(0));
                   :}
                   |
                    STR:value
                   {:
                    RESULT = literalFactory.of(stripQuotes(value));
                   :}
                   |
                    BOOLEAN:value
                   {:
                    RESULT = literalFactory.of(value);
                   :}
                   ;

/*
* This rule is used for debugging.
* It allows entry straight into rules besides the start rule, given
* a special token.
*/
debug           ::= DEBUG_LITERAL literal:literal
                   {:
                    RESULT = literal;
                   :}
                   ;
