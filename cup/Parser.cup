package org.naddeo.elm.parser;

import java_cup.runtime.*;

import java.util.Optional;

import org.naddeo.elm.lang.Literal;
import org.naddeo.elm.lang.LiteralFactory;
import org.naddeo.elm.lang.Exposed;
import org.naddeo.elm.lang.Import;

import org.naddeo.elm.parser.ParserErrorHandler;

action code {:

    private final LiteralFactory literalFactory = new LiteralFactory();

    private String stripQuotes(String input)
    {
        return input.substring(1, input.length()-1);
    }
:};

parser code {:

    public void report_error(String message, Object info) {
        ParserErrorHandler handler = new ParserErrorHandler();
        handler.handle(this, this.stack, message, (Symbol)info);
    }

:};

terminal                            COLON, L_PAREN, R_PAREN, EQUALS, L_BRACKET, R_BRACKET, DOLLAR, NLINE;
terminal                            R_ARROW, R_PIPE, L_PIPE, COMMA, IMPORT, MODULE, AS, EXPOSING;
terminal                            TYPE, EXCLAMATION, BAR;
terminal                            L_SQUARE_BRACKET, R_SQUARE_BRACKET;


terminal                            DEBUG_VALUE, DEBUG_LITERAL, DEBUG_IMPORT_STMT, DEBUG_EXPOSED;

terminal Integer                    INT_NUM;
terminal Double                     FLOAT_NUM;
terminal Boolean                    BOOLEAN;
terminal String                     STR, NAME;
terminal String                     CHR;

non terminal Literal<?>             literal;
non terminal String                 signature;
non terminal Import                 import_stmt;
non terminal Exposed                exposed;
non terminal                        repl, repl_repeat;
non terminal                        debug;

start with debug;


signature       ::= NAME:t1 R_ARROW NAME:t2
                   {:
                    RESULT = t1 + " -> " + t2;
                   :}
                   ;


import_stmt     ::= IMPORT NAME:name
                   {:
                    RESULT = Import.builder()
                        .name(name)
                        .alias(Optional.empty())
                        .exposed(Optional.empty())
                        .build();
                   :}
                   | IMPORT NAME:name AS NAME:alias
                   {:
                    RESULT = Import.builder()
                        .name(name)
                        .alias(Optional.of(alias))
                        .exposed(Optional.empty())
                        .build();
                   :}
                   | IMPORT NAME:name AS NAME:alias EXPOSING L_PAREN exposed:exposed R_PAREN
                   {:
                    RESULT = Import.builder()
                        .name(name)
                        .alias(Optional.of(alias))
                        .exposed(Optional.empty())
                        .build();
                   :}
                   | IMPORT NAME:name EXPOSING L_PAREN exposed:exposed R_PAREN
                   {:
                    RESULT = Import.builder()
                        .name(name)
                        .alias(Optional.empty())
                        .exposed(Optional.of(exposed))
                        .build();
                   :}
                   ;

exposed         ::= NAME:name
                   {:
                    RESULT = Exposed.builder().export(name).build();
                   :}
                   | exposed:exposed COMMA NAME:name
                   {:
                    RESULT = Exposed.builder().exports(exposed.getExports()).export(name).build();
                   :}
                   ;

literal         ::= INT_NUM:value
                   {:
                    RESULT = literalFactory.of(value);
                   :}
                   |
                    FLOAT_NUM:value
                   {:
                    RESULT = literalFactory.of(value);
                   :}
                   |
                    CHR:value
                   {:
                    RESULT = literalFactory.of(stripQuotes(value).charAt(0));
                   :}
                   |
                    STR:value
                   {:
                    RESULT = literalFactory.of(stripQuotes(value));
                   :}
                   |
                    BOOLEAN:value
                   {:
                    RESULT = literalFactory.of(value);
                   :}
                   ;

repl           ::= repl_repeat:r NLINE
                   {:
                    System.out.println(r);
                   :}
                   | repl repl_repeat:r NLINE
                   {:
                    System.out.println(r);
                   :}
                   ;

repl_repeat     ::= signature:signature
                   {:
                    RESULT = signature;
                   :}
                   | literal:literal
                   {:
                    RESULT = literal;
                   :}
                   ;

/*
* This rule is used for debugging.
* It allows entry straight into rules besides the start rule, given
* a special token.
*/
debug           ::= DEBUG_LITERAL literal:literal
                   {:
                    RESULT = literal;
                   :}
                   | repl:repl
                   {:
                    RESULT = repl;
                   :}
                   | DEBUG_IMPORT_STMT import_stmt:importStmt
                   {:
                    RESULT = importStmt;
                   :}
                   | DEBUG_EXPOSED exposed:exposed
                   {:
                    RESULT = exposed;
                   :}
                   ;
